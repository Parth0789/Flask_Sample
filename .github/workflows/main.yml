name: Python Security Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  sast-bandit:
    name: SAST with Bandit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Bandit
        run: pip install bandit

      - name: Run Bandit
        # CORRECTED: Removed the '-c pyproject.toml' flag.
        # It now scans all python files, excludes /tests, and fails on medium/high confidence issues.
        run: bandit -r . -x ./tests -ll

  dependency-scan-snyk:
    name: Dependency Scanning with Snyk
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # - name: Install dependencies
      #   # It's a good practice to install dependencies before scanning
      #   run: pip install -r requirements.txt

      - name: Run Snyk to check for vulnerabilities
        # CORRECTED: The path is now 'snyk/actions/python@master'
        uses: snyk/actions/python@master
        env:
          # Required: Get your Snyk token from your account settings
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          # Fails the build for high-severity issues. Use --all-projects to scan all manifests.
          args: --severity-threshold=high

  secret-scanning-gitleaks:
    name: Secret Scanning with Gitleaks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # We must fetch the entire history for Gitleaks to compare commits.
          fetch-depth: 0

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
